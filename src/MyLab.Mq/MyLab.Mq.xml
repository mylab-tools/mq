<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyLab.Mq</name>
    </assembly>
    <members>
        <member name="T:MyLab.Mq.Communication.DefaultMqConnectionProvider">
            <summary>
            Default implementation for <see cref="T:MyLab.Mq.Communication.IMqConnectionProvider"/>
            </summary>
        </member>
        <member name="M:MyLab.Mq.Communication.DefaultMqConnectionProvider.#ctor(Microsoft.Extensions.Options.IOptions{MyLab.Mq.MqOptions})">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Mq.Communication.DefaultMqConnectionProvider"/>
            </summary>
        </member>
        <member name="M:MyLab.Mq.Communication.DefaultMqConnectionProvider.#ctor(MyLab.Mq.MqOptions)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Mq.Communication.DefaultMqConnectionProvider"/>
            </summary>
        </member>
        <member name="M:MyLab.Mq.Communication.DefaultMqConnectionProvider.#ctor(RabbitMQ.Client.ConnectionFactory)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Mq.Communication.DefaultMqConnectionProvider"/>
            </summary>
        </member>
        <member name="M:MyLab.Mq.Communication.DefaultMqConnectionProvider.Provide">
            <inheritdoc />
        </member>
        <member name="M:MyLab.Mq.Communication.DefaultMqConnectionProvider.Dispose">
            <inheritdoc />
        </member>
        <member name="T:MyLab.Mq.Communication.IMqConnectionProvider">
            <summary>
            Defines MQ connection provider
            </summary>
        </member>
        <member name="M:MyLab.Mq.Communication.IMqConnectionProvider.Provide">
            <summary>
            Provides Mq connection
            </summary>
        </member>
        <member name="T:MyLab.Mq.MqMessage`1">
            <summary>
            Contains MQ message data
            </summary>
            <typeparam name="T">payload type</typeparam>
        </member>
        <member name="P:MyLab.Mq.MqMessage`1.MessageId">
            <summary>
            Message identifier. <see cref="M:System.Guid.NewGuid"/> by default
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqMessage`1.CorrelationId">
            <summary>
            Message correlated to this one
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqMessage`1.ReplyTo">
            <summary>
            Gets response publish parameters
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqMessage`1.Headers">
            <summary>
            Headers
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqMessage`1.Payload">
            <summary>
            Message payload
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqMessage`1.#ctor(`0)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Mq.MqMessage`1"/>
            </summary>
        </member>
        <member name="T:MyLab.Mq.MqHeader">
            <summary>
            Represent MQ message header
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqHeader.Name">
            <summary>
            Header name
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqHeader.Value">
            <summary>
            Header value
            </summary>
        </member>
        <member name="T:MyLab.Mq.PublishTarget">
            <summary>
            Defines publish parameters
            </summary>
        </member>
        <member name="P:MyLab.Mq.PublishTarget.Exchange">
            <summary>
            Exchange name
            </summary>
        </member>
        <member name="P:MyLab.Mq.PublishTarget.Routing">
            <summary>
            Queue name or routing key
            </summary>
        </member>
        <member name="M:MyLab.Mq.PublishTarget.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Mq.PublishTarget"/>
            </summary>
        </member>
        <member name="M:MyLab.Mq.PublishTarget.#ctor(RabbitMQ.Client.PublicationAddress)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Mq.PublishTarget"/>
            </summary>
        </member>
        <member name="T:MyLab.Mq.OutgoingMqEnvelop`1">
            <summary>
            Contains outgoing message and publish parameters
            </summary>
            <typeparam name="T">Message payload type</typeparam>
        </member>
        <member name="P:MyLab.Mq.OutgoingMqEnvelop`1.PublishTarget">
            <summary>
            Gets publish parameters
            </summary>
        </member>
        <member name="P:MyLab.Mq.OutgoingMqEnvelop`1.Expiration">
            <summary>
            Expiration time stamp
            </summary>
        </member>
        <member name="P:MyLab.Mq.OutgoingMqEnvelop`1.Message">
            <summary>
            Outgoing message
            </summary>
        </member>
        <member name="T:MyLab.Mq.MqObjects.MqExchange">
            <summary>
            Provides abilities to work with MQ exchange
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqObjects.MqExchange.Name">
            <summary>
            Exchange name
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqExchange.#ctor(System.String,MyLab.Mq.Communication.IMqConnectionProvider)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Mq.MqObjects.MqExchange"/>
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqExchange.Publish(System.Object,System.String)">
            <summary>
            Publish object as JSON message content
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqExchange.IsExists">
            <summary>
            Gets 'true' if queue exists 
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqExchange.Dispose">
            <summary>
            Remove exchange
            </summary>
        </member>
        <member name="T:MyLab.Mq.MqObjects.MqExchangeFactory">
            <summary>
            Creates MQ exchanges
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqObjects.MqExchangeFactory.Prefix">
            <summary>
            Prefix for exchange name 
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqObjects.MqExchangeFactory.AutoDelete">
            <summary>
            Queue that has had at least one consumer is deleted when last consumer unsubscribes
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqObjects.MqExchangeFactory.Durable">
            <summary>
            The queue will survive a broker restart
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqObjects.MqExchangeFactory.ExchangeType">
            <summary>
            Exchange type
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqExchangeFactory.#ctor(MyLab.Mq.MqObjects.MqExchangeType,MyLab.Mq.Communication.IMqConnectionProvider)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Mq.MqObjects.MqQueueFactory"/>
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqExchangeFactory.CreateWithRandomId">
            <summary>
            Creates exchange with name = {Pattern}:{Guid.NewGuid().ToString("N")}
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqExchangeFactory.CreateWithId(System.String)">
            <summary>
            Creates exchange with name = {Pattern}:{id}
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqExchangeFactory.CreateWithName(System.String)">
            <summary>
            Creates exchange  with name = {name}
            </summary>
        </member>
        <member name="T:MyLab.Mq.MqObjects.MqExchangeType">
            <summary>
            Declare exchange types
            </summary>
        </member>
        <member name="T:MyLab.Mq.MqObjects.MqMessageRead`1">
            <summary>
            Read message
            </summary>
            <typeparam name="T">payload type</typeparam>
        </member>
        <member name="P:MyLab.Mq.MqObjects.MqMessageRead`1.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqMessageRead`1.#ctor(RabbitMQ.Client.IModel,System.UInt64,MyLab.Mq.MqMessage{`0})">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Mq.MqObjects.MqMessageRead`1"/>
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqMessageRead`1.Ack">
            <summary>
            Ack message
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqMessageRead`1.Nack">
            <summary>
            Nack message
            </summary>
        </member>
        <member name="T:MyLab.Mq.MqObjects.MqQueue">
            <summary>
            Represent MQ queue
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqObjects.MqQueue.Name">
            <summary>
            Queue name
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqQueue.#ctor(System.String,MyLab.Mq.Communication.IMqConnectionProvider)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Mq.MqObjects.MqQueue"/>
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqQueue.Publish(System.Object)">
            <summary>
            Publish object as JSON message content
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqQueue.Listen``1(System.Nullable{System.TimeSpan})">
            <summary>
            Listens next message synchronously 
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqQueue.ListenAutoAck``1(System.Nullable{System.TimeSpan})">
            <summary>
            Listens next message synchronously 
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqQueue.BindToExchange(System.String,System.String)">
            <summary>
            Binds queue to exchange
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqQueue.BindToExchange(MyLab.Mq.MqObjects.MqExchange,System.String)">
            <summary>
            Binds queue to exchange
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqQueue.IsExists">
            <summary>
            Gets 'true' if queue exists 
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqQueue.Dispose">
            <summary>
            Remove Queue
            </summary>
        </member>
        <member name="T:MyLab.Mq.MqObjects.MqQueueFactory">
            <summary>
            Creates queue
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqObjects.MqQueueFactory.Prefix">
            <summary>
            Prefix for queue name 
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqObjects.MqQueueFactory.AutoDelete">
            <summary>
            Queue that has had at least one consumer is deleted when last consumer unsubscribes
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqObjects.MqQueueFactory.Durable">
            <summary>
            The queue will survive a broker restart
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqObjects.MqQueueFactory.Exclusive">
            <summary>
            Used by only one connection and the queue will be deleted when that connection closes
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqObjects.MqQueueFactory.DeadLetterExchange">
            <summary>
            Specifies a dead letter exchange
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqObjects.MqQueueFactory.DeadLetterRoutingKey">
            <summary>
            Specifies a dead letter routing key
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqQueueFactory.#ctor(MyLab.Mq.Communication.IMqConnectionProvider)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Mq.MqObjects.MqQueueFactory"/>
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqQueueFactory.CreateWithRandomId">
            <summary>
            Create queue with name = {Pattern}:{Guid.NewGuid().ToString("N")}
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqQueueFactory.CreateWithId(System.String)">
            <summary>
            Create queue with name = {Pattern}:{id}
            </summary>
        </member>
        <member name="M:MyLab.Mq.MqObjects.MqQueueFactory.CreateWithName(System.String)">
            <summary>
            Create queue with name = {name}
            </summary>
        </member>
        <member name="T:MyLab.Mq.MqOptions">
            <summary>
            Contains MQ connection options
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqOptions.Host">
            <summary>
            Server host
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqOptions.VHost">
            <summary>
            Virtual host
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqOptions.Port">
            <summary>
            Port
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqOptions.User">
            <summary>
            Login user
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqOptions.Password">
            <summary>
            Login password
            </summary>
        </member>
        <member name="T:MyLab.Mq.PubSub.IConsumingContext">
            <summary>
            Contains dependencies for consuming
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.IConsumingContext.CreateLogic``1">
            <summary>
            Creates consuming logic
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.IConsumingContext.GetMessage``1">
            <summary>
            Gets delivered message
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.IConsumingContext.Ack">
            <summary>
            Acknowledgement delivery 
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.IConsumingContext.RejectOnError(System.Exception,System.Boolean)">
            <summary>
            Reject delivery 
            </summary>
        </member>
        <member name="P:MyLab.Mq.PubSub.DefaultConsumingContext.DeliveryTag">
            <summary>
            Gets delivery identifier
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.DefaultConsumingContext.#ctor(System.String,RabbitMQ.Client.Events.BasicDeliverEventArgs,System.IServiceProvider,RabbitMQ.Client.IModel,MyLab.Mq.StatusProvider.IMqStatusService,MyLab.Mq.PubSub.IMqMessageAccessor)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Mq.PubSub.DefaultConsumingContext"/>
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.DefaultConsumingContext.CreateLogic``1">
            <summary>
            Creates consuming logic
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.DefaultConsumingContext.GetMessage``1">
            <summary>
            Gets delivered message
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.DefaultConsumingContext.Ack">
            <summary>
            Acknowledgement delivery 
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.DefaultConsumingContext.RejectOnError(System.Exception,System.Boolean)">
            <summary>
            Reject delivery 
            </summary>
        </member>
        <member name="T:MyLab.Mq.PubSub.IInitialConsumerProvider">
            <summary>
            Provides initial registered consumer
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.IInitialConsumerProvider.Provide(System.IServiceProvider)">
            <summary>
            Provides a consumer
            </summary>
        </member>
        <member name="T:MyLab.Mq.PubSub.IMqConsumerLogic`1">
            <summary>
            Represent messages queue consumer
            </summary>
        </member>
        <member name="T:MyLab.Mq.PubSub.IMqBatchConsumerLogic`1">
            <summary>
            Represent batch messages queue consumer
            </summary>
        </member>
        <member name="T:MyLab.Mq.PubSub.IMqConsumerRegistrar">
            <summary>
            Defines MQ consumer registrar
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.IMqConsumerRegistrar.AddConsumer(MyLab.Mq.PubSub.MqConsumer)">
            <summary>
            Registers new MQ consumer
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.IMqConsumerRegistrar.RemoveConsumer(System.String)">
            <summary>
            Unregisters consumer by the name
            </summary>
        </member>
        <member name="T:MyLab.Mq.PubSub.IMqInitialConsumerRegistrar">
            <summary>
            Registers initial MQ consumers
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.IMqInitialConsumerRegistrar.RegisterConsumer(MyLab.Mq.PubSub.MqConsumer)">
            <summary>
            Registers MQ consumer
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.IMqInitialConsumerRegistrar.RegisterConsumerByOptions``1(System.Func{``0,MyLab.Mq.PubSub.MqConsumer})">
            <summary>
            Registers MQ consumer
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.IMqInitialConsumerRegistrar.RegisterConsumerByOptions``2(System.Func{``0,``1},System.Func{``1,MyLab.Mq.PubSub.MqConsumer})">
            <summary>
            Registers MQ consumer if specified option was defined
            </summary>
        </member>
        <member name="T:MyLab.Mq.PubSub.IMqInitialConsumerRegistry">
            <summary>
            Defines consumer registry which contains initial defined consumers
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.IMqInitialConsumerRegistry.GetConsumers(System.IServiceProvider)">
            <summary>
            Gets registered consumer array
            </summary>
        </member>
        <member name="T:MyLab.Mq.PubSub.IMqMessageAccessor">
            <summary>
            Provides current scope MQ incoming message
            </summary>
        </member>
        <member name="T:MyLab.Mq.PubSub.IMqPublisher">
            <summary>
            Defines a Message Queue publisher
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.IMqPublisher.Publish``1(MyLab.Mq.OutgoingMqEnvelop{``0})">
            <summary>
            Publishes message in MQ
            </summary>
        </member>
        <member name="T:MyLab.Mq.PubSub.MqPublisherExtensions">
            <summary>
            Extension methods for <see cref="T:MyLab.Mq.PubSub.IMqPublisher"/>
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.MqPublisherExtensions.Publish``1(MyLab.Mq.PubSub.IMqPublisher,``0)">
            <summary>
            Publishes message
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.MqPublisherExtensions.PublishToQueue``1(MyLab.Mq.PubSub.IMqPublisher,``0,System.String)">
            <summary>
            Publishes message in queue
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.MqPublisherExtensions.PublishToExchange``1(MyLab.Mq.PubSub.IMqPublisher,``0,System.String,System.String)">
            <summary>
            Publishes message in exchange
            </summary>
        </member>
        <member name="T:MyLab.Mq.PubSub.MqIntegration">
            <summary>
            Contains extensions to integrate Mq abilities into application
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.MqIntegration.AddMqPublisher(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add MQ publisher <see cref="T:MyLab.Mq.PubSub.IMqPublisher"/> in application dependency container
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.MqIntegration.AddMqConsuming(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MyLab.Mq.PubSub.IMqInitialConsumerRegistrar})">
            <summary>
            Add MQ consuming abilities
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.MqIntegration.AddMqMsgEmulator(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add Emulator instead default MQ consuming tool
            </summary>
        </member>
        <member name="T:MyLab.Mq.PubSub.MqConfigureIntegration">
            <summary>
            Extensions to MQ tools configuration
            </summary>
        </member>
        <member name="F:MyLab.Mq.PubSub.MqConfigureIntegration.DefaultConfigSectionName">
            <summary>
            Default config section name 
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.MqConfigureIntegration.ConfigureMq(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            Loads configuration for MessageQueue connection
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.MqConfigureIntegration.ConfigureMq(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MyLab.Mq.MqOptions})">
            <summary>
            Loads configuration for MessageQueue connection
            </summary>
        </member>
        <member name="T:MyLab.Mq.PubSub.MqConsumer">
            <summary>
            The base for MQ consumer
            </summary>
        </member>
        <member name="P:MyLab.Mq.PubSub.MqConsumer.Queue">
            <summary>
            Source queue name
            </summary>
        </member>
        <member name="P:MyLab.Mq.PubSub.MqConsumer.BatchSize">
            <summary>
            Determines number of retrieved messages to process
            </summary>
        </member>
        <member name="P:MyLab.Mq.PubSub.MqConsumer.RequeueWhenError">
            <summary>
            Determines requeue behavior when message processing error
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.MqConsumer.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Mq.PubSub.MqConsumer"/>
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.MqConsumer.Consume(MyLab.Mq.PubSub.IConsumingContext)">
            <summary>
            Override to implement message consuming
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.MqConsumer.Dispose">
            <inheritdoc />
        </member>
        <member name="T:MyLab.Mq.PubSub.MqConsumer`2">
            <summary>
            Describes simple MQ consumer
            </summary>
            <typeparam name="TMsgPayload">message payload type</typeparam>
            <typeparam name="TLogic">consuming logic type</typeparam>
        </member>
        <member name="M:MyLab.Mq.PubSub.MqConsumer`2.#ctor(System.String,`1)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Mq.PubSub.MqConsumer`2"/>
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.MqConsumer`2.Consume(MyLab.Mq.PubSub.IConsumingContext)">
            <inheritdoc />
        </member>
        <member name="T:MyLab.Mq.PubSub.MqBatchConsumer`2">
            <summary>
            Describes MQ consumer which consumes a batch of messages
            </summary>
            <typeparam name="TMsgPayload">message payload type</typeparam>
            <typeparam name="TLogic">consuming logic type</typeparam>
        </member>
        <member name="M:MyLab.Mq.PubSub.MqBatchConsumer`2.#ctor(System.String,System.Int32,`1)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Mq.PubSub.MqBatchConsumer`2"/>
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.MqBatchConsumer`2.Consume(MyLab.Mq.PubSub.IConsumingContext)">
            <inheritdoc />
        </member>
        <member name="T:MyLab.Mq.PubSub.MqMsgModelDesc">
            <summary>
            Contains MQ model description
            </summary>
        </member>
        <member name="P:MyLab.Mq.PubSub.MqMsgModelDesc.Routing">
            <summary>
            MQ queue name or routing key
            </summary>
        </member>
        <member name="P:MyLab.Mq.PubSub.MqMsgModelDesc.Exchange">
            <summary>
            MQ exchange name
            </summary>
        </member>
        <member name="M:MyLab.Mq.PubSub.MqMsgModelDesc.GetFromModel(System.Type)">
            <summary>
            Gets info from specified model
            </summary>
        </member>
        <member name="T:MyLab.Mq.MqAttribute">
            <summary>
            Specifies MQ publishing parameters
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqAttribute.Exchange">
            <summary>
            Gets or sets exchange name 
            </summary>
        </member>
        <member name="P:MyLab.Mq.MqAttribute.Routing">
            <summary>
            Gets or sets routing key or queue name
            </summary>
        </member>
        <member name="T:MyLab.Mq.StatusProvider.IMqStatusService">
            <summary>
            Provides abilities to modify MQ status
            </summary>
        </member>
        <member name="M:MyLab.Mq.StatusProvider.IMqStatusService.QueueConnected(System.String)">
            <summary>
            Report about connection to queue for listening
            </summary>
        </member>
        <member name="M:MyLab.Mq.StatusProvider.IMqStatusService.QueueDisconnected(System.String)">
            <summary>
            Report about connection closed
            </summary>
        </member>
        <member name="M:MyLab.Mq.StatusProvider.IMqStatusService.MessageReceived(System.String)">
            <summary>
            Report about incoming message has received 
            </summary>
        </member>
        <member name="M:MyLab.Mq.StatusProvider.IMqStatusService.MessageProcessed(System.String)">
            <summary>
            Report about incoming message succeed processing
            </summary>
        </member>
        <member name="M:MyLab.Mq.StatusProvider.IMqStatusService.ConsumingError(System.String,MyLab.StatusProvider.StatusError)">
            <summary>
            Report about error when incoming message processing
            </summary>
        </member>
        <member name="M:MyLab.Mq.StatusProvider.IMqStatusService.MessageStartSending(System.String)">
            <summary>
            Report about outgoing message sending started
            </summary>
        </member>
        <member name="M:MyLab.Mq.StatusProvider.IMqStatusService.MessageSent(System.String)">
            <summary>
            Report about outgoing message has sent
            </summary>
        </member>
        <member name="M:MyLab.Mq.StatusProvider.IMqStatusService.SendingError(System.String,MyLab.StatusProvider.StatusError)">
            <summary>
            Report about message sending error
            </summary>
        </member>
        <member name="T:MyLab.Mq.StatusProvider.MqStatus">
            <summary>
            Contains MQ specific status
            </summary>
        </member>
        <member name="P:MyLab.Mq.StatusProvider.MqStatus.Consume">
            <summary>
            Contains consuming status for queues
            </summary>
        </member>
        <member name="P:MyLab.Mq.StatusProvider.MqStatus.Publish">
            <summary>
            Contains publishing status for exchanges or queues
            </summary>
        </member>
        <member name="P:MyLab.Mq.StatusProvider.ConsumeMqStatus.LastTime">
            <summary>
            Gets date-time when last incoming message has received
            </summary>
        </member>
        <member name="P:MyLab.Mq.StatusProvider.ConsumeMqStatus.LastError">
            <summary>
            An error which occured when last incoming message processing
            </summary>
        </member>
        <member name="P:MyLab.Mq.StatusProvider.PublishMqStatus.LastTime">
            <summary>
            Gets date-time when last outgoing message has sent
            </summary>
        </member>
        <member name="P:MyLab.Mq.StatusProvider.PublishMqStatus.LastError">
            <summary>
            An error which occured when last outgoing message sending
            </summary>
        </member>
        <member name="T:MyLab.Mq.StatusProvider.MqStatusServiceExtensions">
            <summary>
            Contains extension methods for <see cref="T:MyLab.Mq.StatusProvider.IMqStatusService"/>
            </summary>
        </member>
        <member name="M:MyLab.Mq.StatusProvider.MqStatusServiceExtensions.ConsumingError(MyLab.Mq.StatusProvider.IMqStatusService,System.String,System.Exception)">
            <summary>
            Report about task logic error
            </summary>
        </member>
        <member name="M:MyLab.Mq.StatusProvider.MqStatusServiceExtensions.SendingError(MyLab.Mq.StatusProvider.IMqStatusService,System.String,System.Exception)">
            <summary>
            Report about message sending error
            </summary>
        </member>
        <member name="T:MyLab.Mq.Test.FakeMessageQueueProcResult">
            <summary>
            Contains fake queue message processing result
            </summary>
        </member>
        <member name="P:MyLab.Mq.Test.FakeMessageQueueProcResult.Acked">
            <summary>
            Is there was acknowledge
            </summary>
        </member>
        <member name="P:MyLab.Mq.Test.FakeMessageQueueProcResult.Rejected">
            <summary>
            Is there was rejected
            </summary>
        </member>
        <member name="P:MyLab.Mq.Test.FakeMessageQueueProcResult.RejectionException">
            <summary>
            Exception which is reason of rejection
            </summary>
        </member>
        <member name="P:MyLab.Mq.Test.FakeMessageQueueProcResult.RequeueFlag">
            <summary>
            Requeue flag value
            </summary>
        </member>
        <member name="T:MyLab.Mq.Test.IInputMessageEmulator">
            <summary>
            Specifies emulator of queue with input messages
            </summary>
        </member>
        <member name="M:MyLab.Mq.Test.IInputMessageEmulator.Queue(System.Object,System.String,RabbitMQ.Client.IBasicProperties)">
            <summary>
            Emulates queueing of message 
            </summary>
        </member>
    </members>
</doc>
